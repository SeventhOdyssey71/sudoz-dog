'use client';

import { useState, useEffect } from 'react';
import { useSuiClient, useCurrentAccount } from '@mysten/dapp-kit';
import { CONTRACT_CONSTANTS } from '@/constants/contract';
import { getUserKiosks } from '@/utils/kioskUtils';

// BlockVision API Key (optional - we'll use direct methods if it fails)
const BLOCKVISION_API_KEY = '2vmcIQeMF5JdhEXyuyQ8n79UNoO';

export interface NFTData {
  objectId: string;
  name: string;
  description: string;
  imageUrl: string;
  level: number;
  points: number;
  path?: number;
  number: number;
  type: 'artifact' | 'evolved';
}

export function useNFTs() {
  const [artifacts, setArtifacts] = useState<NFTData[]>([]);
  const [evolvedNFTs, setEvolvedNFTs] = useState<NFTData[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [isRefetching, setIsRefetching] = useState(false);
  
  const client = useSuiClient();
  const account = useCurrentAccount();

  // Fetch NFTs using BlockVision API v1 (legacy)
  const fetchNFTDataForWallet = async (walletAddress: string) => {
    try {
      const myHeaders = new Headers();
      myHeaders.append("X-API-KEY", BLOCKVISION_API_KEY);
      myHeaders.append("Content-Type", "application/json");

      // Use the correct endpoint for Sui NFTs
      const requestOptions = {
        method: "GET",
        headers: myHeaders,
      };

      // Try the correct endpoint format for BlockVision Sui API
      const controller = new AbortController();
      const timeoutId = setTimeout(() => controller.abort(), 5000); // 5 second timeout
      
      const response = await fetch(
        `https://api.blockvision.org/v1/sui/mainnet/account/${walletAddress}/nfts?limit=100`,
        {
          ...requestOptions,
          signal: controller.signal,
        }
      );
      
      clearTimeout(timeoutId);

      if (!response.ok) {
        // If BlockVision fails, return null to use fallback
        console.warn(`BlockVision API returned ${response.status}, using fallback methods`);
        return null;
      }

      const data = await response.json();
      return data;
    } catch (error) {
      console.warn("BlockVision API not available, using fallback:", error);
      return null;
    }
  };

  // Enhanced function to fetch evolved NFTs using BlockVision v2 API
  const fetchEvolvedNFTsWithKiosk = async (walletAddress: string) => {
    console.log('Fetching evolved NFTs including kiosk NFTs for wallet:', walletAddress);
    
    try {
      // Initialize array to hold NFT objects from all sources
      let allEvolvedNfts: any[] = [];
      
      // 1. Try BlockVision v2 API for kiosk NFTs
      try {
        const url = new URL('https://api.blockvision.org/v2/sui/account/nfts');
        url.searchParams.append('account', walletAddress);
        url.searchParams.append('type', 'kiosk'); // Specifically request kiosk NFTs
        url.searchParams.append('pageIndex', '1');
        url.searchParams.append('pageSize', '50');
        
        const headers = {
          'accept': 'application/json',
          'x-api-key': BLOCKVISION_API_KEY
        };
        
        const controller = new AbortController();
        const timeoutId = setTimeout(() => controller.abort(), 5000);
        
        const response = await fetch(url.toString(), { 
          headers,
          signal: controller.signal 
        });
        
        clearTimeout(timeoutId);
        
        if (response.ok) {
          const result = await response.json();
          
          if (result.code === 200) {
            const nfts = result.result?.data || [];
            console.log(`BlockVision v2: Found ${nfts.length} NFTs in kiosks`);
            
            // Filter for evolved SUDOZ NFTs
            const evolvedKioskNfts = nfts.filter((nft: any) => 
              nft.collection && (
                nft.collection === CONTRACT_CONSTANTS.TYPES.EVOLVED_SUDOZ ||
                nft.collection.includes('evolved_sudoz') ||
                nft.collection.includes('EvolvedSudoz')
              )
            );
            
            console.log(`Found ${evolvedKioskNfts.length} evolved SUDOZ NFTs in kiosks`);
            
            // Fetch full details for each kiosk NFT
            for (const nft of evolvedKioskNfts) {
              try {
                const objectData = await client.getObject({
                  id: nft.objectId,
                  options: {
                    showContent: true,
                    showDisplay: true,
                    showType: true,
                  }
                });
                
                if (objectData.data) {
                  // Add kiosk info to the object
                  objectData.data.kioskId = nft.kioskId;
                  objectData.data.isInKiosk = true;
                  allEvolvedNfts.push(objectData);
                }
              } catch (err) {
                console.error('Error fetching kiosk NFT details:', err);
              }
            }
          }
        }
      } catch (blockVisionError) {
        console.error('BlockVision v2 API error:', blockVisionError);
        // Continue with other methods
      }
      
      // 2. Direct ownership query for evolved NFTs
      try {
        const directEvolved = await client.getOwnedObjects({
          owner: walletAddress,
          filter: {
            StructType: CONTRACT_CONSTANTS.TYPES.EVOLVED_SUDOZ,
          },
          options: {
            showContent: true,
            showDisplay: true,
            showType: true,
          },
        });
        
        console.log('Direct evolved NFTs found:', directEvolved.data.length);
        allEvolvedNfts = [...allEvolvedNfts, ...directEvolved.data];
      } catch (error) {
        console.error('Error fetching direct evolved NFTs:', error);
      }
      
      // 3. Alternative type format query
      try {
        const altEvolved = await client.getOwnedObjects({
          owner: walletAddress,
          filter: {
            MatchAll: [
              {
                StructType: `${CONTRACT_CONSTANTS.PACKAGE_ID}::evolved_sudoz::EvolvedSudoz`,
              },
            ],
          },
          options: {
            showContent: true,
            showDisplay: true,
            showType: true,
          },
        });
        
        console.log('Alternative query evolved NFTs found:', altEvolved.data.length);
        
        // Add only unique NFTs
        const existingIds = new Set(allEvolvedNfts.map(nft => nft.data?.objectId));
        for (const nft of altEvolved.data) {
          if (!existingIds.has(nft.data?.objectId)) {
            allEvolvedNfts.push(nft);
          }
        }
      } catch (error) {
        console.error('Error in alternative evolved NFT query:', error);
      }
      
      // Remove duplicates
      const uniqueNfts = allEvolvedNfts.filter((nft, index, self) => 
        index === self.findIndex(n => n.data?.objectId === nft.data?.objectId)
      );
      
      console.log(`Total unique evolved NFTs found: ${uniqueNfts.length}`);
      return uniqueNfts;
      
    } catch (error) {
      console.error('Error in fetchEvolvedNFTsWithKiosk:', error);
      return [];
    }
  };

  const fetchNFTs = async (retryCount = 0) => {
    if (!account?.address) {
      setArtifacts([]);
      setEvolvedNFTs([]);
      setLoading(false);
      return;
    }

    if (!client) {
      if (retryCount < 3) {
        setTimeout(() => fetchNFTs(retryCount + 1), 1000);
      }
      return;
    }

    try {
      // Don't set loading to true if we're just refetching
      if (!isRefetching) {
        setLoading(true);
      }
      setError(null);

      // Fetch SUDOZ Artifacts using original method (they're not in kiosks)
      let artifactsResponse;
      try {
        artifactsResponse = await client.getOwnedObjects({
          owner: account.address,
          filter: {
            StructType: CONTRACT_CONSTANTS.TYPES.SUDOZ_ARTIFACT,
          },
          options: {
            showContent: true,
            showDisplay: true,
          },
        });
      } catch (fetchError) {
        console.error('Failed to fetch artifacts:', fetchError);
        // If network request fails, try again with a shorter timeout
        if (retryCount < 3) {
          setTimeout(() => fetchNFTs(retryCount + 1), 2000);
          return;
        }
        throw new Error('Network error: Unable to connect to Sui network. Please check your connection.');
      }

      // Try to fetch NFTs from BlockVision API (includes kiosk NFTs)
      // This is optional - if it fails, we'll use direct methods
      let blockVisionData = null;
      blockVisionData = await fetchNFTDataForWallet(account.address);
      if (blockVisionData) {
        console.log('BlockVision API response:', blockVisionData);
      }
      
      // Use the enhanced evolved NFT fetching method that includes kiosk NFTs
      const allEvolvedNfts = await fetchEvolvedNFTsWithKiosk(account.address);
      console.log(`Total evolved NFTs found (including kiosks): ${allEvolvedNfts.length}`);
      
      // Legacy BlockVision v1 data is no longer used for evolved NFTs
      // The enhanced fetchEvolvedNFTsWithKiosk function handles all evolved NFT fetching
        try {
          // Get dynamic fields of the kiosk (items stored in kiosk)
          let dynamicFields;
          try {
            dynamicFields = await client.getDynamicFields({
              parentId: kiosk.kioskId,
              limit: 50, // Increase limit to get more items
            });
          } catch (fieldError) {
            console.error(`Failed to get dynamic fields for kiosk ${kiosk.kioskId}:`, fieldError);
            continue;
          }
          
          console.log(`Kiosk ${kiosk.kioskId} dynamic fields:`, dynamicFields.data.length);
          
          // Log field types for debugging
          if (dynamicFields.data.length > 0) {
            console.log('Sample field types:', dynamicFields.data.slice(0, 3).map(f => ({
              name: f.name,
              type: f.objectType,
            })));
          }
          
          // Fetch each item in the kiosk
          for (const field of dynamicFields.data) {
            try {
              const fieldType = field.objectType || '';
              
              // Check if this is a kiosk item
              if (fieldType.includes('0x2::dynamic_field::Field')) {
                const itemData = await client.getDynamicFieldObject({
                  parentId: kiosk.kioskId,
                  name: field.name,
                });
                
                if (itemData.data?.content?.dataType === 'moveObject') {
                  const content = itemData.data.content as any;
                  
                  // Check both the item field type and the value type
                  const itemType = content.fields?.value?.type || '';
                  const itemFields = content.fields?.value?.fields || {};
                  
                  // Also check if the name indicates this is a kiosk item
                  const nameType = typeof field.name === 'object' ? field.name.type : '';
                  const isKioskItem = content.fields?.name?.type?.includes('0x2::kiosk::Item');
                  
                  // Check the actual value for evolved NFT
                  const valueFields = content.fields?.value?.fields || {};
                  
                  // Log for debugging
                  if (isKioskItem || itemType.includes(CONTRACT_CONSTANTS.PACKAGE_ID) || valueFields.metadata_id) {
                    console.log('Potential evolved NFT in kiosk:', {
                      fieldObjectId: field.objectId,
                      isKioskItem,
                      nameType,
                      itemType,
                      hasValueFields: !!valueFields,
                      valueFieldKeys: Object.keys(valueFields),
                      metadata_id: valueFields.metadata_id,
                      number: valueFields.number,
                    });
                  }
                  
                  // Check if this is an evolved NFT by multiple conditions
                  const isEvolvedNFT = (
                    // Check if it's a kiosk item with evolved NFT
                    (isKioskItem && itemType.includes(CONTRACT_CONSTANTS.PACKAGE_ID) && itemType.includes('EvolvedSudoz')) ||
                    // Check the item type includes our package and module
                    (itemType.includes(CONTRACT_CONSTANTS.PACKAGE_ID) && itemType.includes('evolved_sudoz::EvolvedSudoz')) ||
                    // Or check if the name type indicates it's an evolved NFT
                    (nameType && nameType.includes(CONTRACT_CONSTANTS.PACKAGE_ID) && nameType.includes('evolved_sudoz::EvolvedSudoz')) ||
                    // Or check if it has the expected fields
                    (itemFields.metadata_id && itemFields.number !== undefined) ||
                    // Also check if the value fields indicate evolved NFT
                    (valueFields.metadata_id && valueFields.number !== undefined)
                  );
                  
                  if (isEvolvedNFT) {
                    
                    console.log('Found evolved NFT in kiosk:', {
                      type: itemType,
                      nameType,
                      number: itemFields.number,
                      metadata_id: itemFields.metadata_id,
                    });
                    
                    // The value field contains the actual NFT data
                    const evolvedNftFields = valueFields;
                    if (evolvedNftFields && (evolvedNftFields.number !== undefined || evolvedNftFields.metadata_id)) {
                      // Create a proper object structure that matches the direct ownership format
                      const nftObject = {
                        data: {
                          objectId: field.objectId || itemData.data?.objectId,
                          content: {
                            dataType: 'moveObject',
                            type: itemType,
                            fields: evolvedNftFields,
                            hasPublicTransfer: false,
                          },
                          display: {
                            data: {
                              name: evolvedNftFields.name || `THE SUDOZ #${evolvedNftFields.number}`,
                              image_url: evolvedNftFields.image_url || '',
                              description: evolvedNftFields.description || '',
                            }
                          },
                          owner: {
                            ObjectOwner: kiosk.kioskId
                          },
                          type: itemType,
                        }
                      };
                      
                      kioskEvolvedNfts.push(nftObject);
                      console.log('Added evolved NFT from kiosk:', {
                        objectId: nftObject.data.objectId,
                        number: evolvedNftFields.number,
                        metadataId: evolvedNftFields.metadata_id,
                      });
                    }
                  }
                }
              }
            } catch (err) {
              console.error('Error fetching kiosk item:', err);
            }
          }
        } catch (err) {
          console.error('Error fetching kiosk dynamic fields:', err);
        }
      }
      

      // Parse artifacts
      const parsedArtifacts: NFTData[] = artifactsResponse.data
        .map((nft) => {
          if (!nft.data?.content || nft.data.content.dataType !== 'moveObject') {
            console.warn('Skipping artifact - invalid data type:', nft.data);
            return null;
          }

          const content = nft.data.content.fields as any;
          const display = nft.data.display?.data || {};
          
          // Debug logging for artifacts
          if (!display.image_url && !content.image_url) {
            console.warn('Artifact missing image URL:', { objectId: nft.data.objectId, content, display });
          }
          
          let imageUrl = display.image_url || content.image_url || '';
          
          // For evolved NFTs, construct the proper image URL
          if (content.metadata_id) {
            // Use Pinata gateway for evolved NFTs
            imageUrl = `https://moccasin-grateful-spider-300.mypinata.cloud/ipfs/bafybeic7ymazpspv6ojxwrr6rqu3glnrtzbj3ej477nowr73brmb4hkkka/images/${content.metadata_id}.png`;
          } else if (imageUrl.startsWith('ipfs://')) {
            // Convert IPFS URLs to HTTP gateway URLs
            const ipfsHash = imageUrl.replace('ipfs://', '');
            imageUrl = `https://ipfs.io/ipfs/${ipfsHash}`;
          }

          return {
            objectId: nft.data.objectId,
            name: display.name || content.name || 'SUDOZ ARTIFACT',
            description: display.description || content.description || '',
            imageUrl,
            level: parseInt(content.level || '0'),
            points: parseInt(content.points || '0'),
            path: content.path !== undefined ? parseInt(content.path) : undefined,
            number: parseInt(content.number || '0'),
            type: 'artifact' as const,
          };
        })
        .filter((nft): nft is NFTData => nft !== null);

      // allEvolvedNfts already contains all evolved NFTs from direct ownership and kiosks
      
      // Parse evolved NFTs
      const parsedEvolved: NFTData[] = allEvolvedNfts
        .map((nft) => {
          if (!nft.data?.content || nft.data.content.dataType !== 'moveObject') {
            return null;
          }

          const content = nft.data.content.fields as any;
          const display = nft.data.display?.data || {};
          
          let imageUrl = display.image_url || content.image_url || '';
          const metadataId = content.metadata_id || '';
          
          // Debug logging for evolved NFTs
          console.log('Processing evolved NFT:', {
            objectId: nft.data.objectId,
            hasDisplay: !!display.image_url,
            metadataId,
            contentFields: Object.keys(content || {}),
          });
          
          // Convert IPFS URLs to HTTP gateway URLs
          if (imageUrl.startsWith('ipfs://')) {
            const ipfsHash = imageUrl.replace('ipfs://', '');
            imageUrl = `https://ipfs.io/ipfs/${ipfsHash}`;
          }
          
          // For evolved NFTs, construct the proper image URL using metadata_id
          if (metadataId) {
            // Use the WebP version of evolved NFTs with the correct IPFS hash
            imageUrl = `https://plum-defeated-leopon-866.mypinata.cloud/ipfs/bafybeic7kknhjbvdrrkzlthi7zvqg7ilxeeckcq3d7y54qv3xngiw2pjui/nfts/${metadataId}.webp`;
            console.log('Constructed evolved image URL:', imageUrl);
          }
          
          // Fallback: if still no proper image and it's a placeholder
          if (imageUrl.includes('placeholder.webp') && metadataId) {
            imageUrl = `https://plum-defeated-leopon-866.mypinata.cloud/ipfs/bafybeic7kknhjbvdrrkzlthi7zvqg7ilxeeckcq3d7y54qv3xngiw2pjui/nfts/${metadataId}.webp`;
          }
          
          // Additional fallback: Try to construct URL from number if no metadata_id
          if (!imageUrl && content.number) {
            const paddedNumber = content.number.toString().padStart(4, '0');
            imageUrl = `https://plum-defeated-leopon-866.mypinata.cloud/ipfs/bafybeic7kknhjbvdrrkzlthi7zvqg7ilxeeckcq3d7y54qv3xngiw2pjui/nfts/${paddedNumber}.webp`;
          }
          
          const parsedName = display.name || content.name || `THE SUDOZ #${content.number || 'Unknown'}`;
          
          console.log('Parsed evolved NFT:', {
            objectId: nft.data.objectId,
            name: parsedName,
            metadataId,
            imageUrl,
            number: content.number,
          });

          return {
            objectId: nft.data.objectId,
            name: parsedName,
            description: display.description || content.description || '',
            imageUrl,
            level: 10, // Evolved NFTs are considered max level
            points: 12, // Max points for evolved
            path: content.original_path ? parseInt(content.original_path) : undefined,
            number: parseInt(content.number || '0'),
            type: 'evolved' as const,
          };
        })
        .filter((nft): nft is NFTData => nft !== null);

      setArtifacts(parsedArtifacts);
      setEvolvedNFTs(parsedEvolved);
      
      // Log successful fetch
      console.log('NFTs fetched successfully:', {
        artifacts: parsedArtifacts.length,
        evolved: parsedEvolved.length,
        account: account.address,
        directEvolvedCount: evolvedResponse.data.length,
        altQueryEvolvedCount: evolvedResponse2.data.length,
        kioskEvolvedCount: kioskEvolvedNfts.length,
        totalEvolvedCount: allEvolvedNfts.length,
        evolvedType: CONTRACT_CONSTANTS.TYPES.EVOLVED_SUDOZ,
        blockVisionData: blockVisionData?.result?.length || 0,
        userKiosks: userKiosks.length,
      });
    } catch (err: any) {
      console.error('Error fetching NFTs:', err);
      
      // Handle specific error types
      let errorMessage = 'Failed to fetch NFTs';
      
      if (err.message?.includes('Network error')) {
        errorMessage = err.message;
      } else if (err.message?.includes('Failed to fetch')) {
        errorMessage = 'Network connection error. Please check your internet connection and try again.';
      } else if (err.message?.includes('CORS')) {
        errorMessage = 'Cross-origin request blocked. Please check your network settings.';
      }
      
      // Don't show error on first load or if it's just a network hiccup
      if (!isRefetching && artifacts.length === 0 && evolvedNFTs.length === 0) {
        setError(errorMessage);
      }
      
      // If we have a network error and haven't retried too many times, retry
      if (err.message?.includes('fetch') && retryCount < 3) {
        console.log(`Retrying fetch (attempt ${retryCount + 1}/3)...`);
        setTimeout(() => fetchNFTs(retryCount + 1), 2000);
        return;
      }
    } finally {
      setLoading(false);
      setIsRefetching(false);
    }
  };

  useEffect(() => {
    fetchNFTs();
  }, [account?.address, client]);

  // Listen for NFT updates
  useEffect(() => {
    const handleNFTUpdate = () => {
      // Add a small delay to ensure blockchain state is updated
      setTimeout(() => {
        setIsRefetching(true);
        fetchNFTs().finally(() => setIsRefetching(false));
      }, 1000); // Increased delay for better blockchain sync
    };

    window.addEventListener('nft-updated', handleNFTUpdate);
    return () => {
      window.removeEventListener('nft-updated', handleNFTUpdate);
    };
  }, [account?.address, client]); // Add dependencies to ensure we always have latest fetchNFTs

  return {
    artifacts,
    evolvedNFTs,
    loading,
    error,
    refetch: fetchNFTs,
    isRefetching,
  };
}